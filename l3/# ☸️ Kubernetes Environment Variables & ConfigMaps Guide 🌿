# ‚ò∏Ô∏è Kubernetes Environment Variables & ConfigMaps Guide üåø
üéØ Learning Goal

Understand environment variables in Kubernetes, their limitations, and how to use ConfigMaps effectively.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1Ô∏è‚É£ Introduction: Environment Variables in Kubernetes

What to explain:
Environment variables inject configuration into containers.

Example:
env:
  - name: APP_NAME
    value: "Kubernetes 101"
  - name: APP_VERSION
    value: "3.0"

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Concepts to highlight:

‚úÖ Simple and easy for small apps.

‚ö†Ô∏è Hard to manage for large numbers of variables or multiple deployments.

üìù Task:
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Show learners how to inject environment variables into a simple deployment.

Verify inside a pod:

kubectl exec -it <pod-name> -- printenv | findstr APP_
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2Ô∏è‚É£ Problem Statement: Managing Many Variables ‚ùå

Explain with example:

Hundreds of environment variables might be needed.
Variables could be reused in multiple deployments (frontend, backend, etc.).
Maintaining them manually is error-prone and inefficient.

üìù Task:

Ask learners to imagine duplicating the same variables across 2‚Äì3 deployments.

Discuss why this is not scalable.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3Ô∏è‚É£ ConfigMaps: A Kubernetes Solution üóÇÔ∏è

What to explain:

A ConfigMap is a Kubernetes object to store configuration data.
Stores key-value pairs centrally.
Can be reused in multiple deployments.
Can be injected as:

Environment variables
Files inside a container
Symbols/Visual:

[ConfigMap] ---> [Deployment A Pod]
          \
           ---> [Deployment B Pod]

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
üìù Task:

Explain difference between environment variables in manifest vs ConfigMap.

Show how ConfigMap reduces duplication.

4Ô∏è‚É£ Creating ConfigMaps--------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
a) Imperative way:
kubectl create configmap app-config \
  --from-literal=APP_NAME="Kubernetes 101" \
  --from-literal=APP_VERSION="3.0"

b) Declarative way:
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  APP_NAME: "Kubernetes 101"
  APP_VERSION: "3.0"

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
üìù Task:

Learners create a ConfigMap using both imperative and declarative approaches.

5Ô∏è‚É£ Using ConfigMaps in Deployments

What to explain:

Reference ConfigMap in your deployment:

containers:
  - name: hello-app
    image: sars20006/hello-app:3.0
    envFrom:
      - configMapRef:
          name: app-config


All keys from ConfigMap are automatically injected as environment variables.

üìù Task:

Update deployment to use ConfigMap.
Verify variables in pod:
kubectl exec -it <pod-name> -- printenv | findstr APP_

6Ô∏è‚É£ Key Notes & Best Practices ‚ú®

ConfigMaps are not for secrets ‚Üí use Secrets for sensitive data.
Can be updated without rebuilding images.
Supports both imperative and declarative styles.
Makes deployment manifests cleaner and maintainable.

7Ô∏è‚É£ Summary Table üìä
Feature	Environment Variables	ConfigMaps
Centralized management	‚ùå	‚úÖ
Reusable across apps	‚ùå	‚úÖ
Easy to update	‚ùå	‚úÖ
Declarative & versioned	‚ùå	‚úÖ

üìù Task:

Compare both approaches.
Discuss scenarios where ConfigMaps are useful.

8Ô∏è‚É£ Optional Practical Demo üöÄ

Create a Node.js app reading variables via process.env.
Create a ConfigMap with 3‚Äì4 variables.
Inject ConfigMap into deployment.

Verify with:

kubectl exec -it <pod-name> -- printenv | findstr APP_

Observe how multiple deployments can reuse the same ConfigMap.

üí° Next Steps:

Explore Secrets for sensitive configuration.
Use ConfigMaps for different environments (dev, staging, production).
