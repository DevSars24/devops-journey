🎥 Kubernetes Service – Demo (ClusterIP Example)
👋 Introduction
Speaker: Piyush

Topic: Demo of Kubernetes Services

✅ We already learned:

What is a Service?

Types of services: ClusterIP, NodePort, LoadBalancer.

Why & when to use them.

🔎 Now → We’ll see how to create a Service and what happens if we don’t create one.

🛠 Step 1: Deployment YAML Setup
📌 A simple NGINX Deployment with 3 replicas.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80   # Exposing container on port 80
⚡ Explanation:

containerPort: 80 → Like Docker -p 80:80, publishing NGINX inside the pod.

🏃 Step 2: Applying Deployment
kubectl apply -f deploy.yaml
❌ First error: “resource name must not be empty” → Caused by wrong indentation.

✅ Fixed → Remember the 4 top-level fields:

apiVersion, kind, metadata, spec.

Re-applied → Deployment created successfully.

🔍 Step 3: Verify Deployment
kubectl get deploy -w
-w → watch (like tail -f) → updates continuously.

Pods start coming up.

kubectl get pods
Shows 3 running pods for the deployment.

⚠️ Step 4: Problem – No Endpoint for User
Users must access this as a frontend web app.

❌ Issue: No endpoint exposed.

Trying direct pod access:

kubectl get pods -o wide
Pods have IP addresses.

curl <pod-ip>:80
❌ Fails → Pod IPs are internal to cluster (not routable).


curl localhost:80
❌ Still fails → Port not exposed externally.

👉 Conclusion: We need a Service.

🛰 Step 5: Creating a ClusterIP Service
Check command help:


kubectl expose --help
Create Service:

kubectl expose deployment nginx-deployment --port=80
✅ Output: “service/nginx-deployment exposed”

Check services:

kubectl get svc
NAME	TYPE	CLUSTER-IP	PORT(S)	AGE
kubernetes	ClusterIP	10.96.0.1	443/TCP	…
nginx-deployment	ClusterIP	10.97.124.2	80/TCP	…

🔬 Step 6: Inspect Service
kubectl describe svc nginx-deployment
Shows:

Type: ClusterIP

Port: 80 → TargetPort: 80

Endpoints: Pod IPs (e.g., 10.244.1.3, 10.244.0.3, 10.244.1.2).

📌 Mapping:

Frontend (Service IP) → Backend (Pods IPs).

Service = Stable Access Point.

🚫 Step 7: Access Problem with ClusterIP
curl <cluster-ip>:80
❌ Doesn’t work on local machine → ClusterIP is internal only.

🛣 Step 8: Accessing Service in Minikube
Minikube doesn’t expose ClusterIP directly → Needs tunnel/port-forwarding.

Option 1: List services
minikube service list
Shows all services, but no external URLs (ClusterIP only).

Option 2: Access via Minikube Service
minikube service nginx-deployment --url
Output:

http://127.0.0.1:50029
👉 Minikube binds service to a random high port (50029) and forwards it internally to port 80 on the pods.

Open in browser:
🌐 http://127.0.0.1:50029 → ✅ Welcome to nginx 🎉

📚 Reference
Minikube Docs → minikube service <service-name> --url

ClusterIP → Internal-only (useful for backend + DB).

For external users → Use NodePort or LoadBalancer.

🎯 Key Takeaways
🔑 Concept	💡 Meaning
Pods IPs	Temporary, not stable for users.
Deployment	Ensures replicas are healthy.
Service	Stable endpoint + load balancer.
ClusterIP	Internal only, default type.
Minikube Service	Tunneling to access ClusterIP locally.

✅ Without Service → No stable endpoint.
✅ With Service → Pods grouped behind one stable address.

👉 Next Lecture → NodePort Service Demo 📤
