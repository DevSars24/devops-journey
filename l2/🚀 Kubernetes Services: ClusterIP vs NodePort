🚀 1. What is a Kubernetes Service?

A Service in Kubernetes provides a stable way to access your Pods. Since Pods are ephemeral (they can die and restart), services act as a networking abstraction to ensure traffic always finds the right Pods.

There are different types of services:

🔹 ClusterIP → Default, accessible inside the cluster only
🔹 NodePort → Exposes the service outside the cluster via a static port on each Node
🔹 LoadBalancer → Integrates with Cloud Providers for external load balancing

In this demo, we’ll focus on ClusterIP and NodePort.

🛠 2. Deploying Nginx (Demo Application)
Let’s start with a simple Nginx Deployment.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# nginx-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
👉 Apply it:

kubectl apply -f nginx-deployment.yaml
Check if Pods are running:

kubectl get pods --show-labels
✅ You should see 3 Pods with the label:

app=nginx
🌐 3. Exposing Deployment with a Service (ClusterIP)
Step 1: Declarative Service YAML
Instead of using imperative commands (kubectl expose ...), we’ll create a service YAML:

# service-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-clusterip-service
spec:
  selector:
    app: nginx   # selects pods with this label
  ports:
    - port: 80          # service port
      targetPort: 80    # container port
  type: ClusterIP       # default, can even omit this
👉 Apply it:

kubectl apply -f service-clusterip.yaml
Step 2: Verify Service

kubectl get svc
Expected Output:

NAME                       TYPE        CLUSTER-IP     PORT(S)   AGE
nginx-clusterip-service    ClusterIP   10.96.120.45   80/TCP    2m
Step 3: Check Endpoints


kubectl get endpoints
You’ll see 3 endpoints, one for each Pod:


nginx-clusterip-service   172.17.0.4:80, 172.17.0.5:80, 172.17.0.6:80
📌 Meaning:

Service forwards requests on port 80

Routes traffic to all 3 Nginx Pods

🌍 4. Exposing Deployment with a Service (NodePort)
Now let’s make it accessible outside the cluster.

Step 1: NodePort YAML

# service-nodeport.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-nodeport-service
spec:
  selector:
    app: nginx
  ports:
    - port: 80          # service port (internal cluster)
      targetPort: 80    # pod container port
      nodePort: 30080   # static port on Node
  type: NodePort


👉 Apply it:
kubectl apply -f service-nodeport.yaml
Step 2: Verify Service

kubectl get svc
Expected Output:

NAME                       TYPE        CLUSTER-IP     PORT(S)          AGE
nginx-nodeport-service     NodePort    10.96.45.23    80:30080/TCP     2m
📌 Breakdown:

ClusterIP: 10.96.45.23 → Internal cluster access

80:30080/TCP →

Port 80 inside cluster

Port 30080 on each Node (external access)

Step 3: Access Service
In a real Kubernetes cluster:

http://<NodeIP>:30080
In Minikube:

minikube service nginx-nodeport-service
This opens a browser automatically 🎉

If successful → You should see the “Welcome to Nginx” page ✅

🔑 5. Difference Between ClusterIP and NodePort
Feature	ClusterIP 🌐 (Default)	NodePort 🚪 (External Access)
Accessibility	Internal only	Accessible from outside
Default?	✅ Yes	❌ No (must specify)
Port Assignment	Random Cluster IP	Static Node Port (30000–32767)
Use Case	Pod-to-Pod communication	Exposing apps to users

📊 6. Visualization
ClusterIP (Internal Traffic Only)

User ❌
    |
  Service (ClusterIP: 10.96.x.x:80)
    |
  ┌─────────────┐
  │ Nginx Pods  │
  │ 80          │
  └─────────────┘
NodePort (External Traffic Allowed)
java
Copy
Edit
User 🌍 → http://<NodeIP>:30080
    |
NodePort Service (80:30080)
    |
  ┌─────────────┐
  │ Nginx Pods  │
  │ 80          │
  └─────────────┘
✅ Conclusion
ClusterIP → For internal communication within cluster

NodePort → For external access on a fixed port

Always remember:

port → Service’s own port

targetPort → Container’s port

nodePort → Exposed Node port

Now you can safely expose services declaratively using YAML manifests 🎉
