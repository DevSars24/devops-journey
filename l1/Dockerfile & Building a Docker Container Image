1. What is a Dockerfile?

A Dockerfile is a text file that contains a set of instructions that Docker uses to build an image.
Think of it like a recipe — it tells Docker step-by-step how to set up your application environment.

2. Common Dockerfile Instructions

Command	Purpose

FROM	Sets the base image (starting point for your image).

WORKDIR	Sets the working directory inside the container.

COPY	Copies files from your host machine to the container.

RUN	Executes commands during image build.

EXPOSE	Informs Docker which port your app will use.

CMD	Specifies the default command to run when the container starts.

3. Example: Vite React App Dockerfile
# Base image (lightweight Node.js Alpine version)
FROM node:22-alpine

# Set working directory inside container
WORKDIR /app

# Copy package.json and package-lock.json first
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Expose the Vite default dev server port
EXPOSE 5173

# Start the Vite development server
CMD ["npm", "run", "dev"]

4. Building the Docker Image

Run this command in the same folder as your Dockerfile:

docker build -t my-vite-app .


Here:

-t my-vite-app → gives your image a name (my-vite-app)

. → means build using the current folder

5. Running the Container
docker run -it -p 5173:5173 my-vite-app


Here:

-it → interactive terminal

-p 5173:5173 → maps container port to host port

my-vite-app → the image name you built

6. Important Notes

Development Mode:
Running npm run dev in Docker works, but for production you’d build the app and serve static files using something like nginx.

Why COPY package.json first?*
To use Docker caching so dependencies don’t reinstall every time code changes.

EXPOSE doesn’t actually open the port — it’s just documentation. You still need -p in docker run.

RUN vs CMD:

RUN → executes while building the image

CMD → executes when running the container
