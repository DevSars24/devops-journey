📂 File Structure

express/
│
├── Dockerfile        # Instructions to build Docker image
├── package.json      # Node.js dependencies and scripts
├── package-lock.json # (auto-generated) dependency lock file
└── index.js          # Main Node.js server file

📑 Role of Each File


index.js → Starts the Express server and handles routes.
package.json → Lists dependencies (express) and project info.
Dockerfile → Blueprint for creating a container image of our app.

⚙️ index.js (Node.js server code)

const express = require('express');
const app = express();

// use process.env.PORT so Docker can inject environment variable
const port = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send("👋 Hello world from a Dockerised app!");
});

app.listen(port, () => {
  console.log(`✅ Example app listening on port ${port}`);
});
🐳 Dockerfile
dockerfile
# 1. Use official Node.js runtime
FROM node:22-alpine

# 2. Set working directory inside container
WORKDIR /app

# 3. Copy package.json and package-lock.json first
COPY package*.json ./

# 4. Install dependencies
RUN npm install

# 5. Copy all project files
COPY . .

# 6. Set environment variable for port
ENV PORT=3000

# 7. Start the app
CMD ["node", "index.js"]
🔥 Commands We Used
Build Docker image

docker build -t express-app .
-t express-app → tag the image with name express-app.

Run Docker container
docker run -p 4000:3000 --rm express-app
-p 4000:3000 → maps host 4000 → container 3000.

--rm → removes container when stopped.

❌ Problems Faced & ✅ Fixes

Empty Dockerfile error
Cause → Dockerfile was empty / invalid.
Fix → Write proper Dockerfile with Node.js setup.

Wrong ENV syntax

dockerfile
ENV PORT = 3000   # ❌ wrong
ENV PORT=3000     # ✅ correct
Invalid docker run command

docker run -p 4000:3000 -e port = 3000 -rm express-app  # ❌ wrong
docker run -p 4000:3000 --rm express-app                # ✅ correct
Localhost refused to connect

Cause → container was running, but host could not access it.

Fix → Use port mapping (-p 4000:3000).

🔀 Port Mapping Explained
Inside Docker container:

Node.js app listens on port 3000.
On host machine:
We mapped 4000 → 3000 with -p 4000:3000.

So we access the app at:
👉 http://localhost:4000

Host (4000)  --->  Container (3000)
🎉 Final Output
When you open http://localhost:4000, you see:

css
Copy
Edit
👋 Hello world from a Dockerised app!
✨ That’s it! You’ve successfully containerized a Node.js app with Docker.
